import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:sub_part_2/quiz.dart';
import 'package:sub_part_2/result.dart';
import 'package:hexcolor/hexcolor.dart';
import 'package:http/http.dart' as http;

void main() {
  runApp(const MyApp());
}

class MyApp extends StatefulWidget {
  const MyApp({Key? key}) : super(key: key);

  @override
  State<StatefulWidget> createState() {
    return _MyAppState();
  }
}

class _MyAppState extends State<MyApp> {
  List<Map<String, Object>>? _data;
  var _indexQuestion = 0;
  double _totalScore = 0.00;

  @override
  void initState() {
    super.initState();
    fetchData();
  }

  Future<void> fetchData() async {
    int catIn = 18; //category
    try {
      List<Map<String, Object>> parsedQuestions =
          await parseJsonResponse(catIn);
      setState(() {
        _data = parsedQuestions;
      });
    } catch (error) {
      // Handle error, show an error message or retry
      throw Exception('Failed to fetch trivia questions');
    }
  }

  void _answerQuestion(double score) {
    setState(() {
      _totalScore += score;
      _indexQuestion += 1;
    });
  }

  void _restart() {
    setState(() {
      _indexQuestion = 0;
      _totalScore = 0;
    });
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        backgroundColor: Colors.white,
        appBar: AppBar(
          title: Align(
            alignment: Alignment.center,
            child: Text(
              "Trivia App",
              style: TextStyle(
                fontSize: 23,
                fontStyle: FontStyle.normal,
                color: HexColor("#F5FFF0"),
              ),
            ),
          ),
          backgroundColor: const Color.fromARGB(255, 91, 161, 145),
        ),
        body: Align(
          alignment: Alignment.center,
          child: (_indexQuestion <= 8 && _indexQuestion >= 0 && _data != null)
              ? Quiz(
                  answerQuestion: _answerQuestion,
                  indexQuestion: _indexQuestion,
                  data: _data!,
                )
              : Result(_totalScore, _restart),
        ),
      ),
    );
  }
}

List<Map<String, Object>> parseJsonResponseToString(String jsonResponse) {
  final decoded = json.decode(jsonResponse);
  final results = decoded['results'];

  List<Map<String, Object>> parsedQuestions = [];
  for (int i = 0; i < results.length && i < 9; i++) {
    final question = results[i]['question'];
    final correctAnswer = results[i]['correct_answer'];
    final incorrectAnswers = List<String>.from(results[i]['incorrect_answers']);

    final allAnswers = [correctAnswer, ...incorrectAnswers];
    allAnswers.shuffle();

    List<Map<String, Object>> answers = [];
    for (int j = 0; j < allAnswers.length; j++) {
      final answerText = allAnswers[j];
      final score = (answerText == correctAnswer) ? 11.11 : 0.0;
      answers.add({'text': answerText, 'score': score});
    }

    parsedQuestions.add({
      'questionText': question,
      'answers': answers,
    });
  }

  return parsedQuestions;
}

Future<List<Map<String, Object>>> parseJsonResponse(int catIn) async {
  final cat = num.parse(catIn.toStringAsFixed(2));
  var apiUrl = Uri.parse(
      'https://opentdb.com/api.php?amount=9&category=$cat&type=multiple');

  try {
    var response = await http.get(apiUrl);
    if (response.statusCode == 200) {
      String jsonString = response.body;
      return parseJsonResponseToString(jsonString);
    } else {
      throw Exception('Failed to fetch trivia questions');
    }
  } catch (error) {
    //print('Error fetching trivia data: $error');
    throw Exception('Failed to fetch trivia questions');
  }
  //throw Exception('Failed to fetch trivia questions');
}
